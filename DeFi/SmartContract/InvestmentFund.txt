// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract InvestmentFund {
    address public owner;
    uint256 public totalInvested;
    uint256 public totalDividends;
    uint256 public dividendPercentage;

    mapping(address => uint256) public balances;
    mapping(address => uint256) public lastClaimed;

    address[] public investors;

    event Investment(address indexed investor, uint256 amount);
    event Withdrawal(address indexed investor, uint256 amount);
    event DividendsDistributed(uint256 amount);
    event Deposit(address indexed owner, uint256 amount);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can perform this action");
        _;
    }

    modifier hasInvestment() {
        require(balances[msg.sender] > 0, "No investment found");
        _;
    }

    modifier notOwner() {
        require(msg.sender != owner, "Owner cannot invest");
        _;
    }

    constructor(uint256 _dividendPercentage) {
        owner = msg.sender;
        dividendPercentage = _dividendPercentage;
    }

    function invest() external payable notOwner {
        require(msg.value > 0, "Investment must be greater than 0");

        if (balances[msg.sender] == 0) {
            investors.push(msg.sender);
        }

        balances[msg.sender] += msg.value;
        totalInvested += msg.value;

        emit Investment(msg.sender, msg.value);
    }

    function deposit() external payable onlyOwner {
        require(msg.value > 0, "Deposit amount must be greater than 0");

        emit Deposit(msg.sender, msg.value);
    }

    function withdraw(uint256 amount) external hasInvestment {
        require(amount <= balances[msg.sender], "Insufficient balance to withdraw");

        balances[msg.sender] -= amount;
        totalInvested -= amount;

        payable(msg.sender).transfer(amount);

        emit Withdrawal(msg.sender, amount);
    }

    function distributeDividends() external onlyOwner {
        uint256 availableFunds = address(this).balance - totalInvested;
        require(availableFunds > 0, "No available funds for dividends");

        uint256 dividends = (availableFunds * dividendPercentage) / 10000;
        totalDividends += dividends;

        uint256 totalInvestorInvestment = totalInvested;

        for (uint256 i = 0; i < investors.length; i++) {
            address investor = investors[i];

            if (investor == owner) {
                continue;
            }

            uint256 investorShare = (balances[investor] * dividends) / totalInvestorInvestment;
            if (investorShare > 0) {
                lastClaimed[investor] = block.timestamp;

                payable(investor).transfer(investorShare);
            }
        }

        emit DividendsDistributed(dividends);
    }

    function getUserBalance() external view returns (uint256) {
        return balances[msg.sender];
    }

    function getTotalBalance() external view returns (uint256) {
        return address(this).balance;
    }

    function setDividendPercentage(uint256 _dividendPercentage) external onlyOwner {
        dividendPercentage = _dividendPercentage;
    }
}
